

(128*) + (64*) +(32*) + (16*) +(8*) + (4*) +(2*) + (1*)

=========================================================================================================

Give Binary Number for given numbers

53
	53/2 Rem = 1
	26/2 Rem = 0
	13/2 Rem = 1
	 6/2 Rem = 0
	 3/2 Rem = 1
	 1/2 Rem = 1
	 0
	---------------
	Binary For 53 is = 00110101


41
	41/2 Rem = 1
	20/2 Rem = 0
	10/2 Rem = 0
	 5/2 Rem = 1
	 2/2 Rem = 0
	 1/2 Rem = 1
	 0
	---------------
	Binary For 41 is = 00101001
 
=========================================================================================================

Give Decimal Number for given numbers

0 1 0 1 0 0 1 1
		
			= (128*0) + (64*1) + (32*0) + (16*1) + (8*0) + (4*0) + (2*1) + (1*1)
			
			= 0 + 64 + 0 + 16 + 0 + 0 + 2 + 1
			
			= 83



0 1 0 0 0 1 1 1
			
			= (128*0) + (64*1) +(32*0) + (16*0) +(8*0) + (4*1) +(2*1) + (1*1)
			
			= 0 + 64 + 0 + 0 + 0 + 4 + 2 + 1
			
			= 71
			
=========================================================================================================

Perform Bitwise AND Between Decimal Numbers 83 & 71 Give the Result in Decimal

83         =>            0 1 0 1 0 0 1 1

                      &

71	       =>    		 0 1 0 0 0 1 1 1

					=======================
                         0 1 0 0 0 0 1 1
						 
		
	Decimal Equivalent is = (128*0) + (64*1) +(32*0) + (16*0) +(8*0) + (4*0) +(2*1) + (1*1)
			
						  = 0 + 64 + 0 + 0 + 0 + 0 + 2 + 1
						  
						  = 67
						  
========================================================================================================

Perform Bitwise OR Between Decimal Numbers 83 & 71 Give the Result in Decimal

83         =>            0 1 0 1 0 0 1 1

                      |

71	       =>    		 0 1 0 0 0 1 1 1

					=======================
                         0 1 0 1 0 1 1 1 
						 
		
	Decimal Equivalent is = (128*0) + (64*1) +(32*0) + (16*1) +(8*0) + (4*1) +(2*1) + (1*1)
			
						  = 0 + 64 + 0 + 16 + 0 + 4 + 2 + 1
						  
						  = 87
========================================================================================================

Perform Bitwise XOR Between Decimal Numbers 83 & 71 Give the Result in Decimal

83         =>            0 1 0 1 0 0 1 1

                      ^

71	       =>    		 0 1 0 0 0 1 1 1

					=======================
                         0 0 0 1 0 1 0 0
						 
		
	Decimal Equivalent is = (128*0) + (64*0) +(32*0) + (16*1) +(8*0) + (4*1) +(2*0) + (1*0)
			
						  = 0 + 0 + 0 + 16 + 0 + 4 + 0 + 0
						  
						  = 20
========================================================================================================

Perform Bitwise Compliment For Decimal Numbers 83 , Give the Result in Decimal

83         =>            0 1 0 1 0 0 1 1

Bitwise Compliment for 83 
						
					~    0 1 0 1 0 0 1 1
				------------------------------
				         1 0 1 0 1 1 0 0
						 
	Decimal Equivalent is = (128*1) + (64*0) +(32*1) + (16*0) +(8*1) + (4*1) +(2*0) + (1*0)
				
						  =  128 + 0 + 32 + 0 + 8 + 4 + 0 + 0
						  
						  =  172
-------------------------------------------------------------------------------------------------				
****Note :
			The bitwise complement of 83 (~83) is -84 instead of 172, but why?

			For any integer n, bitwise complement of n will be -(n+1). 
			To understand this, you should have the knowledge of 2's complement.
			
	2's Compliment of 172 
	
						1 0 1 0 1 1 0 0 =  -(0 1 0 1 0 0 1 1   +    1 )
	
	-----------------------------------------------------------------------------
						
						
													  1	1
											0 1 0 1 0 0 1 1
										+
											0 0	0 0 0 0 0 1
										---------------------
											0 1 0 1 0 1 0 0
	-----------------------------------------------------------------------------
						
										=  -(0 1 0 1 0 1 0 0)
										
	-(0 1 0 1 0 1 0 0) Decimal Equivalent,
	
					= -( (128*0) + (64*1) +(32*0) + (16*1) +(8*0) + (4*1) +(2*0) + (1*0)  )
					
					= -( 0 + 64 + 0 + 16 + 0 + 4 + 0 + 0 )
			
					= -(84)
					
					= -84

=======================================================================================================
					

Right Shift Operator

				83         =>  0 1 0 1 0 0 1 1
				
				
			83 >> 2        =>  0 0 0 1 0 1 0 0


			Resultant is   => (128*0) + (64*0) +(32*0) + (16*1) +(8*0) + (4*1) +(2*0) + (1*0)

						   =>  0  +  0  +  0  +  16  +  0  +  4  +  0  +  0

						   => 20
						   
----------------------------------------------------------------------------------------------------						   
						   
						   
			83 >> 4    =>   0 0 0 0 0 1 0 1


			Resultant is   => (128*0) + (64*0) +(32*0) + (16*0) +(8*0) + (4*1) +(2*0) + (1*1)

						   =>  0  +  0  +  0  +  0  +  0  +  4  +  0  +  1

						   =>  5
		
====================================================================================================================================

Left Shift Operator

			83         	   =>  0 1 0 1 0 0 1 1
				
				
			83 << 2        =>  0 1 0 1 0 0 1 1 0 0


			Resultant is   =>  (512*0) + (256*1) + (128*0) + (64*1) +(32*0) + (16*0) +(8*1) + (4*1) +(2*0) + (1*0)

						   =>  0 + 256 + 0 + 64 + 0 + 0 + 8 + 4 + 0 + 0 

						   =>  332

------------------------------------------------------------------------------------------------------------------------------------

			83         	   =>  0 1 0 1 0 0 1 1
				
				
			83 << 5        =>  0 1 0 1 0 0 1 1 0 0 0 0 0


			Resultant is   => (4096 * 0) + (2048 * 1 ) + (1024 * 0) + (512 * 1) + (256 * 0) + (128 * 0) + (64 * 1) + (32 * 1) + (16 * 0) +(8 * 0) + (4 * 0) +(2 * 0) + (1 * 0)

						   =>  0 + 2048 + 0 + 512 + 0 + 0 + 64 + 32 + 0 + 0 + 0 + 0 + 0 
						   
						   =>  2656

====================================================================================================================================
						   
----------------------------------------------------------------------------------------------------						   
						   



83         =>            0 1 0 1 0 0 1 1

                      &

4	       =>    		 0 0 0 0 0 1 0 0

					=======================
                         0 0 0 0 0 0 0 0






71	       =>    		 0 1 0 0 0 1 1 1

					&

4	       =>    		 0 0 0 0 0 1 0 0

					=======================
                         0 0 0 0 0 1 0 0
